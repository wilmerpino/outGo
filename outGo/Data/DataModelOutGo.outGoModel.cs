//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 25/9/2017 6:05:09 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace outGoModel
{

    public partial class outGoModel : DbContext
    {

        public outGoModel() :
            base()
        {
            OnCreated();
        }

        public outGoModel(DbContextOptions<outGoModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null))
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=outGo;Integrated Security=True;Persist Security Info=True");
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Comercios> Comercios
        {
            get;
            set;
        }

        public virtual DbSet<Detalles> Detalles
        {
            get;
            set;
        }

        public virtual DbSet<Facturas> Facturas
        {
            get;
            set;
        }

        public virtual DbSet<Pagos> Pagos
        {
            get;
            set;
        }

        public virtual DbSet<Personas> Personas
        {
            get;
            set;
        }

        public virtual DbSet<Relaciones> Relaciones
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.ComerciosMapping(modelBuilder);
            this.CustomizeComerciosMapping(modelBuilder);

            this.DetallesMapping(modelBuilder);
            this.CustomizeDetallesMapping(modelBuilder);

            this.FacturasMapping(modelBuilder);
            this.CustomizeFacturasMapping(modelBuilder);

            this.PagosMapping(modelBuilder);
            this.CustomizePagosMapping(modelBuilder);

            this.PersonasMapping(modelBuilder);
            this.CustomizePersonasMapping(modelBuilder);

            this.RelacionesMapping(modelBuilder);
            this.CustomizeRelacionesMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region Comercios Mapping

        private void ComerciosMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comercios>().ToTable(@"comercios", @"dbo");
            modelBuilder.Entity<Comercios>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Comercios>().Property<string>(x => x.Nombre).HasColumnName(@"nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Comercios>().Property<string>(x => x.Ublicacion).HasColumnName(@"ublicacion").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Comercios>().Property<string>(x => x.Tipo).HasColumnName(@"tipo").HasColumnType(@"varchar(25)").ValueGeneratedNever().HasMaxLength(25);
            modelBuilder.Entity<Comercios>().HasKey(@"Id");
        }
	
        partial void CustomizeComerciosMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Detalles Mapping

        private void DetallesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Detalles>().ToTable(@"detalles", @"dbo");
            modelBuilder.Entity<Detalles>().Property<int>(x => x.IdFactura).HasColumnName(@"id_factura").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Detalles>().Property<string>(x => x.TipoGasto).HasColumnName(@"tipo_gasto").HasColumnType(@"varchar(25)").IsRequired().ValueGeneratedNever().HasMaxLength(25);
            modelBuilder.Entity<Detalles>().Property<double>(x => x.Monto).HasColumnName(@"monto").HasColumnType(@"float").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Detalles>().HasKey(@"IdFactura", @"TipoGasto");
        }
	
        partial void CustomizeDetallesMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Facturas Mapping

        private void FacturasMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Facturas>().ToTable(@"facturas", @"dbo");
            modelBuilder.Entity<Facturas>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Facturas>().Property<int>(x => x.IdComercio).HasColumnName(@"id_comercio").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Facturas>().Property<string>(x => x.NumFactura).HasColumnName(@"num_factura").HasColumnType(@"varchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Facturas>().Property<System.DateTime>(x => x.Fecha).HasColumnName(@"fecha").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Facturas>().Property<double>(x => x.MontoPesos).HasColumnName(@"monto_pesos").HasColumnType(@"float").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Facturas>().Property<System.Nullable<double>>(x => x.MontoDolares).HasColumnName(@"monto_dolares").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<Facturas>().Property<System.Nullable<double>>(x => x.ComisionDolares).HasColumnName(@"comision_dolares").HasColumnType(@"float").ValueGeneratedNever();
            modelBuilder.Entity<Facturas>().Property<string>(x => x.Detalle).HasColumnName(@"detalle").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Facturas>().HasKey(@"Id");
        }
	
        partial void CustomizeFacturasMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Pagos Mapping

        private void PagosMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Pagos>().ToTable(@"pagos", @"dbo");
            modelBuilder.Entity<Pagos>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pagos>().Property<int>(x => x.IdFactura).HasColumnName(@"id_factura").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pagos>().Property<System.Nullable<int>>(x => x.IdPersona).HasColumnName(@"id_persona").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Pagos>().Property<double>(x => x.MontoPagado).HasColumnName(@"monto_pagado").HasColumnType(@"float").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pagos>().HasKey(@"Id");
        }
	
        partial void CustomizePagosMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Personas Mapping

        private void PersonasMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Personas>().ToTable(@"personas", @"dbo");
            modelBuilder.Entity<Personas>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Personas>().Property<string>(x => x.Nombre).HasColumnName(@"nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Personas>().Property<string>(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Personas>().Property<string>(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Personas>().HasKey(@"Id");
        }
	
        partial void CustomizePersonasMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Relaciones Mapping

        private void RelacionesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Relaciones>().ToTable(@"relaciones", @"dbo");
            modelBuilder.Entity<Relaciones>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Relaciones>().Property<int>(x => x.IdFactura).HasColumnName(@"id_factura").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Relaciones>().Property<double>(x => x.Monto).HasColumnName(@"monto").HasColumnType(@"float").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Relaciones>().Property<string>(x => x.Descripcion).HasColumnName(@"descripcion").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Relaciones>().Property<int>(x => x.IdPersona).HasColumnName(@"id_persona").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Relaciones>().Property<System.Nullable<bool>>(x => x.GastoPersonal).HasColumnName(@"gasto_personal").HasColumnType(@"bit").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Relaciones>().HasKey(@"Id");
        }
	
        partial void CustomizeRelacionesMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region Comercios Navigation properties

            modelBuilder.Entity<Comercios>().HasMany(x => x.Facturas).WithOne(op => op.Comercios).IsRequired(true).HasForeignKey(@"IdComercio");

        #endregion

        #region Detalles Navigation properties

            modelBuilder.Entity<Detalles>().HasOne(x => x.Facturas).WithMany(op => op.Detalles).IsRequired(true).HasForeignKey(@"IdFactura");

        #endregion

        #region Facturas Navigation properties

            modelBuilder.Entity<Facturas>().HasMany(x => x.Detalles).WithOne(op => op.Facturas).IsRequired(true).HasForeignKey(@"IdFactura");
            modelBuilder.Entity<Facturas>().HasOne(x => x.Comercios).WithMany(op => op.Facturas).IsRequired(true).HasForeignKey(@"IdComercio");
            modelBuilder.Entity<Facturas>().HasMany(x => x.Pagos).WithOne(op => op.Facturas).IsRequired(true).HasForeignKey(@"IdFactura");
            modelBuilder.Entity<Facturas>().HasMany(x => x.Relaciones).WithOne(op => op.Facturas).IsRequired(true).HasForeignKey(@"IdFactura");

        #endregion

        #region Pagos Navigation properties

            modelBuilder.Entity<Pagos>().HasOne(x => x.Facturas).WithMany(op => op.Pagos).IsRequired(true).HasForeignKey(@"IdFactura");
            modelBuilder.Entity<Pagos>().HasOne(x => x.Personas).WithMany(op => op.Pagos).IsRequired(false).HasForeignKey(@"IdPersona");

        #endregion

        #region Personas Navigation properties

            modelBuilder.Entity<Personas>().HasMany(x => x.Pagos).WithOne(op => op.Personas).IsRequired(false).HasForeignKey(@"IdPersona");
            modelBuilder.Entity<Personas>().HasMany(x => x.Relaciones).WithOne(op => op.Personas).IsRequired(true).HasForeignKey(@"IdPersona");

        #endregion

        #region Relaciones Navigation properties

            modelBuilder.Entity<Relaciones>().HasOne(x => x.Facturas).WithMany(op => op.Relaciones).IsRequired(true).HasForeignKey(@"IdFactura");
            modelBuilder.Entity<Relaciones>().HasOne(x => x.Personas).WithMany(op => op.Relaciones).IsRequired(true).HasForeignKey(@"IdPersona");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
